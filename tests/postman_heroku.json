{
	"info": {
		"_postman_id": "1558f3ce-cb07-4aa6-8855-3ec4a5a2a55c",
		"name": "DynaFood",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "API Status",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "",
							"value": "",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/welcome",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"welcome"
					]
				}
			},
			"response": []
		},
		{
			"name": "SignUp no credentials",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"const response = pm.response.json();",
							"",
							"pm.test(\"Response contains 'Error'\", () => {",
							"    pm.expect(response.Error).to.be.an('object');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{base_url}}/signup",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "SignUp weak password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"const response = pm.response.json();",
							"",
							"pm.test(\"Response contains 'Error'\", () => {",
							"    pm.expect(response.Error).to.be.an('object');",
							"});",
							"",
							"pm.test(\"Weak password message\", () => {",
							"    pm.expect(response.Error.details[0].message).to.eql(\"\\\"password\\\" length must be at least 8 characters long\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "firstName",
							"value": "Test",
							"type": "text"
						},
						{
							"key": "lastName",
							"value": "Test",
							"type": "text"
						},
						{
							"key": "userName",
							"value": "Test",
							"type": "text"
						},
						{
							"key": "email",
							"value": "{{test_email}}",
							"type": "text"
						},
						{
							"key": "phoneNumber",
							"value": "123123123",
							"type": "text"
						},
						{
							"key": "password",
							"value": "1",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/signup",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "SignUp invalid email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"const response = pm.response.json();",
							"",
							"pm.test(\"Response contains 'Error'\", () => {",
							"    pm.expect(response.Error).to.be.an('object');",
							"});",
							"",
							"pm.test(\"Invalid email message\", () => {",
							"    pm.expect(response.Error.details[0].message).to.eql(\"\\\"email\\\" must be a valid email\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "firstName",
							"value": "Test",
							"type": "text"
						},
						{
							"key": "lastName",
							"value": "Test",
							"type": "text"
						},
						{
							"key": "userName",
							"value": "Test",
							"type": "text"
						},
						{
							"key": "email",
							"value": "this is not an email",
							"type": "text"
						},
						{
							"key": "phoneNumber",
							"value": "123123123",
							"type": "text"
						},
						{
							"key": "password",
							"value": "1",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/signup",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "SignUp invalid username",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"const response = pm.response.json();",
							"",
							"pm.test(\"Response contains 'Error'\", () => {",
							"    pm.expect(response.Error).to.be.an('object');",
							"});",
							"",
							"pm.test(\"Invalid username message\", () => {",
							"    pm.expect(response.Error.details[0].message).to.eql(\"\\\"userName\\\" length must be less than or equal to 20 characters long\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "firstName",
							"value": "Test",
							"type": "text"
						},
						{
							"key": "lastName",
							"value": "Test",
							"type": "text"
						},
						{
							"key": "userName",
							"value": "this is a really really really really long username that should not be allowed",
							"type": "text"
						},
						{
							"key": "email",
							"value": "{{test_email}}",
							"type": "text"
						},
						{
							"key": "phoneNumber",
							"value": "123123123",
							"type": "text"
						},
						{
							"key": "password",
							"value": "1",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/signup",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "SignUp invalid firstname",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"const response = pm.response.json();",
							"",
							"pm.test(\"Response contains 'Error'\", () => {",
							"    pm.expect(response.Error).to.be.an('object');",
							"});",
							"",
							"pm.test(\"Invalid firstname message\", () => {",
							"    pm.expect(response.Error.details[0].message).to.eql(\"\\\"firstName\\\" length must be less than or equal to 20 characters long\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "firstName",
							"value": "Testddddddddddddddddddddddddddddddddddddddddddddddddddd",
							"type": "text"
						},
						{
							"key": "lastName",
							"value": "Test",
							"type": "text"
						},
						{
							"key": "userName",
							"value": "Test",
							"type": "text"
						},
						{
							"key": "email",
							"value": "{{test_email}}",
							"type": "text"
						},
						{
							"key": "phoneNumber",
							"value": "123123123",
							"type": "text"
						},
						{
							"key": "password",
							"value": "1",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/signup",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "SignUp invalid lastname",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"const response = pm.response.json();",
							"",
							"pm.test(\"Response contains 'Error'\", () => {",
							"    pm.expect(response.Error).to.be.an('object');",
							"});",
							"",
							"pm.test(\"Invalid lastname message\", () => {",
							"    pm.expect(response.Error.details[0].message).to.eql(\"\\\"lastName\\\" length must be less than or equal to 20 characters long\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "firstName",
							"value": "Test",
							"type": "text"
						},
						{
							"key": "lastName",
							"value": "Testddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd",
							"type": "text"
						},
						{
							"key": "userName",
							"value": "Test",
							"type": "text"
						},
						{
							"key": "email",
							"value": "{{test_email}}",
							"type": "text"
						},
						{
							"key": "phoneNumber",
							"value": "123123123",
							"type": "text"
						},
						{
							"key": "password",
							"value": "1",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/signup",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "SignUp invalid phonenumber",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"const response = pm.response.json();",
							"",
							"pm.test(\"Response contains 'Error'\", () => {",
							"    pm.expect(response.Error).to.be.an('object');",
							"});",
							"",
							"pm.test(\"Invalid phonenumber message\", () => {",
							"    pm.expect(response.Error.details[0].message).to.eql(\"\\\"phoneNumber\\\" length must be at least 8 characters long\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "firstName",
							"value": "Test",
							"type": "text"
						},
						{
							"key": "lastName",
							"value": "Test",
							"type": "text"
						},
						{
							"key": "userName",
							"value": "Test",
							"type": "text"
						},
						{
							"key": "email",
							"value": "{{test_email}}",
							"type": "text"
						},
						{
							"key": "phoneNumber",
							"value": "1",
							"type": "text"
						},
						{
							"key": "password",
							"value": "1",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/signup",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "SignUp normal",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "firstName",
							"value": "TestUser",
							"type": "text"
						},
						{
							"key": "lastName",
							"value": "TestUser",
							"type": "text"
						},
						{
							"key": "userName",
							"value": "TestUser",
							"type": "text"
						},
						{
							"key": "email",
							"value": "{{test_email}}",
							"type": "text"
						},
						{
							"key": "phoneNumber",
							"value": "123123123",
							"type": "text"
						},
						{
							"key": "password",
							"value": "{{test_password}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/signup",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "SignUp duplicated email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 409\", function () {",
							"    pm.response.to.have.status(409);",
							"});",
							"",
							"const res = pm.response.json();",
							"",
							"pm.test(\"Right error description\", () => {",
							"    pm.expect(res.Error).to.eql(\"email already exists\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "firstName",
							"value": "TestUser",
							"type": "text"
						},
						{
							"key": "lastName",
							"value": "TestUser",
							"type": "text"
						},
						{
							"key": "userName",
							"value": "TestUser",
							"type": "text"
						},
						{
							"key": "email",
							"value": "{{test_email}}",
							"type": "text"
						},
						{
							"key": "phoneNumber",
							"value": "123123123",
							"type": "text"
						},
						{
							"key": "password",
							"value": "{{test_password}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/signup",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"signup"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "email",
							"value": "{{test_email}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "password",
							"value": "{{test_password}}",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/login?email={{test_email}}&password={{test_password}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"login"
					],
					"query": [
						{
							"key": "email",
							"value": "{{test_email}}"
						},
						{
							"key": "password",
							"value": "{{test_password}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "User without restrictions",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"validate response data\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.firstName).to.eql(\"TestUser\");",
							"    pm.expect(jsonData.lastName).to.eql(\"TestUser\");",
							"    pm.expect(jsonData.userName).to.eql(\"TestUser\");",
							"    pm.expect(jsonData.email).to.eql(\"test@gmail.com\");",
							"    pm.expect(jsonData.phoneNumber).to.eql(\"123123123\");",
							"    pm.expect(jsonData.restrictons).to.eql([]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/user",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login wrong email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Correct error message\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.Error).to.eql(\"There is no user with the email 111test@gmail.com\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "email",
							"value": "{{test_email}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "password",
							"value": "{{test_password}}",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/login?email=111{{test_email}}&password={{test_password}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"login"
					],
					"query": [
						{
							"key": "email",
							"value": "111{{test_email}}"
						},
						{
							"key": "password",
							"value": "{{test_password}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Login wrong password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"Correct error message\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.Error).to.eql(\"Wrong credentials\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "email",
							"value": "{{test_email}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "password",
							"value": "{{test_password}}",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/login?email={{test_email}}&password=111{{test_password}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"login"
					],
					"query": [
						{
							"key": "email",
							"value": "{{test_email}}"
						},
						{
							"key": "password",
							"value": "111{{test_password}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Product Request Logged in",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Respnse contains correct name\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.name).to.eql(\"Mineralwasser still\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/products/barcode/42376095",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"products",
						"barcode",
						"42376095"
					]
				}
			},
			"response": []
		},
		{
			"name": "Product Request Invalid code",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/products/barcode/4",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"products",
						"barcode",
						"4"
					]
				}
			},
			"response": []
		},
		{
			"name": "History Logged in",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"check if 'elements' is present\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.elements).to.be.an('array');",
							"});",
							"",
							"var jsonData = pm.response.json();",
							"pm.test(\"check correct element content\", function () {",
							"    pm.expect(jsonData.elements[0].barcode).to.eql(\"42376095\");",
							"});",
							"",
							"pm.collectionVariables.set(\"history_id\", jsonData.elements[0].historyid);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/history",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"history"
					]
				}
			},
			"response": []
		},
		{
			"name": "settings empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/settings",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"settings"
					]
				}
			},
			"response": []
		},
		{
			"name": "settings add",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "alertActivation",
							"value": "true",
							"type": "text"
						},
						{
							"key": "restrictionName",
							"value": "peanut",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/settings",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"settings"
					]
				}
			},
			"response": []
		},
		{
			"name": "settings non empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Check correct restriction name and alertactivation\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0].restrictionname).to.eql(\"peanut\");",
							"    pm.expect(jsonData[0].alertactivation).to.eql(true);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/settings",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"settings"
					]
				}
			},
			"response": []
		},
		{
			"name": "User with restrictions",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"TODO: validate response data\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.firstName).to.eql(\"TestUser\");",
							"    pm.expect(jsonData.lastName).to.eql(\"TestUser\");",
							"    pm.expect(jsonData.userName).to.eql(\"TestUser\");",
							"    pm.expect(jsonData.email).to.eql(\"test@gmail.com\");",
							"    pm.expect(jsonData.phoneNumber).to.eql(\"123123123\");",
							"    pm.expect(jsonData.restrictons).to.eql([{",
							"            \"alertactivation\": true,",
							"            \"restrictionName\": \"peanut\"",
							"    }]);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/user",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "settings patch valid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "restrictionName",
							"value": "peanut",
							"type": "text"
						},
						{
							"key": "alertActivation",
							"value": "false",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/settings",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"settings"
					]
				}
			},
			"response": []
		},
		{
			"name": "settings patch invalid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"TODO THIS IS NOT WORKING YET. Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"TODO: Check correct Error message\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.Error).to.eql(\"The restriction peanutsdfa is not available on dynafood!\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "restrictionName",
							"value": "peanutsdfa",
							"type": "text"
						},
						{
							"key": "alertActivation",
							"value": "false",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/settings",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"settings"
					]
				}
			},
			"response": []
		},
		{
			"name": "settings non empty check alert change",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Check correct restriction name and alertactivation\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0].restrictionname).to.eql(\"peanut\");",
							"    pm.expect(jsonData[0].alertactivation).to.eql(false);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/settings",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"settings"
					]
				}
			},
			"response": []
		},
		{
			"name": "settings remove",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "restrictionName",
							"value": "peanut",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/settings",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"settings"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete history",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/history/{{history_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"history",
						"{{history_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User <- also deletes jwt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Correct response content\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.Deleted[0]).to.be.an('object');",
							"    pm.expect(jsonData.Deleted[0].email).to.eql(\"test@gmail.com\");",
							"});",
							"",
							"// deleting jwt because the following requests should not have a valid token",
							"const cookieJar = pm.cookies.jar();",
							"cookieJar.unset(\"https://dynafood.herokuapp.com\", \"token\", (error) => {});",
							"cookieJar.unset(\"localhost\", \"token\", (error) => {});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/user",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "try settings unauthorized",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"pm.test(\"Check error content\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.Error).to.eql(\"401 Unauthorized\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/settings",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"settings"
					]
				}
			},
			"response": []
		},
		{
			"name": "try settings add unauthorized",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"pm.test(\"Check error content\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.Error).to.eql(\"401 Unauthorized\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "alertActivation",
							"value": "true",
							"type": "text"
						},
						{
							"key": "restrictionName",
							"value": "peanut",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/settings",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"settings"
					]
				}
			},
			"response": []
		},
		{
			"name": "try settings patch unauthorized",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"pm.test(\"Check error content\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.Error).to.eql(\"401 Unauthorized\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "restrictionName",
							"value": "peanut",
							"type": "text"
						},
						{
							"key": "alertActivation",
							"value": "false",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/settings",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"settings"
					]
				}
			},
			"response": []
		},
		{
			"name": "History Not logged in",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"Check error content\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.Error).to.eql(\"401 Unauthorized\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/history",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"history"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete history not logged in",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"pm.test(\"Check error content\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.Error).to.eql(\"401 Unauthorized\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/history/{{history_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"history",
						"{{history_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Product Request not Logged in",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/products/barcode/42376095",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"products",
						"barcode",
						"42376095"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://dynafood.herokuapp.com"
		},
		{
			"key": "test_email",
			"value": "test@gmail.com"
		},
		{
			"key": "test_password",
			"value": "SuperSecurePassword123"
		},
		{
			"key": "history_id",
			"value": ""
		},
		{
			"key": "base_url",
			"value": "localhost:8081",
			"disabled": true
		}
	]
}